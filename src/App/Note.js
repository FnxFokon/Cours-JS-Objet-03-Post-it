import app from './App';

const MODE_VIEW = 'view';
const MODE_EDIT = 'edit';

class Note {

    // On d√©clare ses propri√©t√©s
    title;
    content;
    dateCreate;
    dateUpdate;

    // On d√©clare le constructeur qui r√©cup√®re un objet litt√©ral
    // et qui va hydrater notre instance de Note 

    constructor(noteLitteral) {
        this.title = noteLitteral.title;
        this.content = noteLitteral.content;
        this.dateCreate = noteLitteral.dateCreate;
        this.dateUpdate = noteLitteral.dateUpdate;
    }

    // M√©thode qui construit et retourne l'√©l√©ment HTML de la note
    getDom() {
        const elLi = document.createElement('li');
        elLi.classList.add('nota');
        elLi.dataset.mode = MODE_VIEW;

        // On transforme le timestamp en "vrai" date
        let dateCreate = new Date(this.dateCreate);
        let dateUpdate = new Date(this.dateUpdate);

        // header
        let innerDom = '<div class="nota-header">';
        innerDom += '<div class="nota-times">';
        innerDom += `<strong>cr√©ation: </strong>${dateCreate.toLocaleString()}<br>`;
        innerDom += `<strong>m√†j: </strong>${dateUpdate.toLocaleString()}`;
        innerDom += '</div><div class="nota-cmd">';
        innerDom += '<div data-cmd="view">';
        innerDom += '<button type="button" data-role="edit">‚úèÔ∏è</button>';
        innerDom += '<button type="button" data-role="delete">üóëÔ∏è</button>';
        innerDom += '</div>';
        innerDom += '<div data-cmd="edit">';
        innerDom += '<button type="button" data-role="save">üíæ</button>';
        innerDom += '<button type="button" data-role="cancel">‚ùå</button>';
        innerDom += '</div>';
        innerDom += '</div></div>';

        // title
        innerDom += `<div class="nota-title">${this.title}</div>`;

        // content
        innerDom += `<div class="nota-content">${this.content}</div>`;
        elLi.innerHTML = innerDom;
        elLi.addEventListener('click', this.handleClick.bind(this));

        return elLi;
    }

    // GESTIONNAIRE D'EVENEMENT
    // M√©thode pour la gestion des actions des diff√©rents bouttons
    handleClick(evt) {

        const elLi = evt.currentTarget; // currentTarget est l'√©l√©ment sur lequel on a pos√© l'√©couteur
        const elBtn = evt.target; // Target est l'√©lement sur lequel on a cliqu√©
        const elTitle = elLi.querySelector('.nota-title'); // On r√©cup√®re l'√©l√©ment qui a la class nota-title
        const elContent = elLi.querySelector('.nota-content');  // On r√©cup√®re l'√©l√©ment qui a la classe nota-content
        const idxLi = Array.from(elLi.parentElement.children).indexOf(elLi); // On r√©cup√®re l'index de l'√©l√©ment li dans la liste des li
        const objNote = app.arrNotas[idxLi]; // TODO: r√©cup√©ration de arrayNote[idxLi] depuis app

        // Si le Li n'est pas coh√©rent avec les datas on return
        if (!app.isEditMode && elTitle.textContent !== objNote.title) return;

        // G√©rer les diff√©rents √©venements des boutons
        switch (elBtn.dataset.role) {
            case 'edit':
                // Si on n'est pas sens√© avoir acc√®s √† edit, on sort
                if (app.isEditMode) return;

                // On passe en mode edit
                app.isEditMode = true;

                // On passe le datased.mode en edit
                elLi.dataset.mode = MODE_EDIT;

                // On passe le contenue de l'√©l√©ment
                elTitle.contentEditable = elContent.contentEditable = true;

                break;

            case 'delete':
                // Si on n'est pas sens√© avoir acc√®s √† delete, on sort
                if (app.isEditMode) return;

                // On supprime le nota du tableau
                app.arrNotas.splice(idxLi, 1);

                // Sauvegarde des donn√©es
                app.noteService.saveStorage(app.arrNotas);

                // On reg√©n√®re les notes
                app.renderNotes();

                break;

            case 'save':
                // Si on n'est pas sens√© avoir acc√®s √† cancel, on sort
                if (!app.isEditMode) return;

                // Mise √† jour des donn√©e du tableau
                objNote.title = elTitle.textContent;
                objNote.content = elContent.textContent;
                objNote.dateUpdate = Date.now();

                // On enregistre dans le local storage
                app.noteService.saveStorage(app.arrNotas);

                // On repasse en mode view
                app.isEditMode = false;

                // On reg√©nere un rendu de note
                app.renderNotes();

                break;

            case 'cancel':
                // Si on n'est pas sens√© avoir acc√®s √† cancel, on sort
                if (!app.isEditMode) return;

                // On passe en mode view
                app.isEditMode = false;

                // On passe le dataset.mode en view
                elLi.dataset.mode = MODE_VIEW;

                // On reg√©nere un rendu de note
                app.renderNotes();

                break;

            default:
                return;
        }

    }
}

export default Note;